name: Build

on:
  push:

jobs:
  build-linux:
    name: Build Linux (${{matrix.name}} x86_64)
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: GCC
            cc: gcc
            cxx: g++
            ld: gold
          - name: Clang
            cc: clang
            cxx: clang++
            ld: lld

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install curl git cmake ninja-build meson clang lld \
            python3 python3-mako python-is-python3 ccache

          # free up disk space
          # https://github.com/actions/virtual-environments/issues/2840#issuecomment-790492173
          echo Before
          df -h .
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo After
          df -h .

      - name: Configure ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ubuntu-20.04-${{matrix.cc}}
          max-size: 1G

      - name: Configure CMake
        run: |
          cmake -B build llvm -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/install" \
            -DCMAKE_C_COMPILER=${{matrix.cc}} -DCMAKE_CXX_COMPILER=${{matrix.cxx}} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DLLVM_USE_LINKER=${{matrix.ld}}

      - name: Build
        run: cmake --build build --config RelWithDebInfo --target install-distribution

      - name: Create tarball
        run: tar -C install -cavf hsh-linux-${{matrix.cc}}-x86_64.tar.gz --xform 's:^\./::' .

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: hsh-linux-${{matrix.cc}}-x86_64
          path: hsh-linux-${{matrix.cc}}-x86_64.tar.gz

  build-macos:
    name: Build macOS (AppleClang universal)
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew update
          brew install ninja meson bison flex ccache
          python3 -m pip install Mako

      - name: Configure ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: macos-10.15-appleclang
          max-size: 1G

      - name: Configure CMake
        run: |
          cmake -B build llvm -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/install" \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        continue-on-error: true
        run: cmake --build build --config RelWithDebInfo --target install-distribution

      - name: Generate .dSYMs
        run: dsymutil install/bin/*

      - name: Create tarball
        run: tar -C install -cavf hsh-macos-appleclang-universal.tar.gz -s '/.//' .

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: hsh-macos-appleclang-universal
          path: hsh-macos-appleclang-universal.tar.gz

  build-windows:
    name: Build Windows (${{matrix.name}} x86_64)
    runs-on: windows-2019
    env:
      BUILDCACHE_VERSION: v0.26.1
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MSVC
            oname: msvc
            cc: cl
            ld: '' # implicitly link.exe
#          - name: Clang
#            oname: clang
#            cc: clang-cl
#            ld: lld

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          choco install ninja meson winflexbison3
          echo "$env:ProgramFiles\Meson" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python3 -m pip install Mako

          # set up buildcache
          $TempDir = "$env:RUNNER_WORKSPACE\temp"
          New-Item -Path "$TempDir" -ItemType Directory -ea 0
          (New-Object Net.WebClient).DownloadFile("https://github.com/mbitsnbites/buildcache/releases/download/$env:BUILDCACHE_VERSION/buildcache-windows.zip", "$TempDir\buildcache.zip")
          Expand-Archive -LiteralPath "$TempDir\buildcache.zip" -DestinationPath "$TempDir"
          echo "$TempDir\buildcache\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "BUILDCACHE_ACCURACY=STRICT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BUILDCACHE_DIR=$env:GITHUB_WORKSPACE\.buildcache" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BUILDCACHE_MAX_CACHE_SIZE=1073741824" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore buildcache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.buildcache
          key: buildcache-win32-${{matrix.oname}}

      - name: Enable Visual Studio environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: |
          buildcache -z
          cmake -B build llvm -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_INSTALL_PREFIX:PATH="$env:GITHUB_WORKSPACE\install" `
            -DCMAKE_C_COMPILER=${{matrix.cc}} -DCMAKE_CXX_COMPILER=${{matrix.cc}} `
            -DCMAKE_C_COMPILER_LAUNCHER=buildcache -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache `
            -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING="/MD /Z7 /O2 /Ob1 /DNDEBUG" `
            -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING="/MD /Z7 /O2 /Ob1 /DNDEBUG" `
            -DLLVM_USE_LINKER=${{matrix.ld}}

      - name: Build
        run: cmake --build build --config RelWithDebInfo --target install-distribution

      - name: Print buildcache stats
        run: buildcache -s

      - name: Create 7z
        run: 7z a -t7z hsh-win32-${{matrix.oname}}-x86_64.7z .\install\*

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: hsh-win32-${{matrix.oname}}-x86_64
          path: hsh-win32-${{matrix.oname}}-x86_64.7z

  release:
    name: Release
    runs-on: ubuntu-20.04
    if:
      contains('
        refs/heads/master
        refs/heads/ci
      ', github.ref)
    needs:
      - build-linux
      - build-macos
      - build-windows

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{github.token}}
          automatic_release_tag: latest
          prerelease: true
          title: Continuous build
          files: |
            artifacts/*/*
